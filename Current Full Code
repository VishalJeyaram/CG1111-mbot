#include <Wire.h>
#include <SoftwareSerial.h>
#include <MeMCore.h>
#include <Arduino.h>


// define pin numbers for multiple sensors
#define IR_LEFT A0
#define IR_RIGHT A1
#define BUTTON A7
#define MOTOR_SPEED 100
#define LINE 

// initialize peripheral objects
MeDCMotor motor_left(M1);
MeDCMotor motor_right(M2);
MeLineFollower lineFinder(PORT_2);
MeLimitSwitch ir_sides(PORT_4);
MeUltrasonicSensor ultra(PORT_1);
// MeRGBLed rgb_led(PORT_7);
MeLightSensor lightSensor(PORT_6);
MeBuzzer buzzer;
MePort ir_sensor(PORT_3);

void setup() {
  // initialize serial communications at 9600 bps
  Serial.begin(9600);
  
  // initialize left and right IR side sensor pins
  pinMode(IR_LEFT, INPUT);
  pinMode(IR_RIGHT, INPUT); 

  // initialize start button
  // press then release button to begin the run
  pinMode(BUTTON, INPUT);

//  // turn off the LED
//  rgb_led.setColor(0, 0, 0);
//  rgb_led.show();
//
//  // turn on the LED
//  rgb_led.setColor(0, 255, 255);
//  rgb_led.show();
}

void loop() {
  // read the lightSensor value:
  //int value = lightSensor.read();

  // print the lightSensor value measured by ultrasonic sensor to serial monitor
//  Serial.print("lightSensor value = ");
  //Serial.println(value);

  // print the distance measured by ultrasonic sensor to serial monitor
 // Serial.print("Distance : ");
 // Serial.print(ultra.distanceCm() );
 // Serial.println(" cm");

  // print the values measured by ir sensors to serial monitor
 // int val1 = ir_sides.aRead1();
  //int val2 = ir_sides.aRead2();
 // Serial.print("irSensor1 value = ");
 // Serial.println(val1);
 // Serial.print("irSensor2 value = ");
 // Serial.println(val2);

  // wait 100 milliseconds before the next loop
  moveFront();
}

void _loop() {
}

void _delay(float seconds) {
  long endTime = millis() + seconds * 1000;
  while(millis() < endTime) _loop();
}

void music() 
{
  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 1.1 * 1000);

  buzzer.tone(1397, 1.3 * 1000);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(932, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 1.25 * 1000);
  _delay(1);

  buzzer.tone(1047, 0.5 * 1000);

  buzzer.tone(1047, 0.5 * 1000);
  _delay(0.25);

  buzzer.tone(1568, 0.3 * 1000);

  buzzer.tone(1397, 1.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 1.1 * 1000);

  buzzer.tone(1175, 0.5 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 1.25 * 1000);
  _delay(1);

  buzzer.tone(1047, 0.5 * 1000);

  buzzer.tone(1047, 0.5 * 1000);
  _delay(0.5);

  buzzer.tone(1568, 0.5 * 1000);

  buzzer.tone(1760, 1.4 * 1000);
  _delay(0.25);

  buzzer.tone(1397, 0.5 * 1000);

  buzzer.tone(1568, 0.5 * 1000);
  _delay(1);

  buzzer.tone(1047, 1.25 * 1000);
  _delay(1);

  buzzer.tone(1047, 0.5 * 1000);

  buzzer.tone(1047, 0.5 * 1000);
  _delay(0.25);

  buzzer.tone(1568, 0.3 * 1000);

  buzzer.tone(1397, 1.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 1.1 * 1000);

  buzzer.tone(1175, 0.5 * 1000);
  _delay(0.5);

  buzzer.tone(932, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(932, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(932, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 2 * 1000);
}








int clear_path() 
{
  int line_value = lineFinder.readSensors();
  if (line_value == S1_OUT_S2_OUT) {
    return 1;
  }
  return 0;
}

int obstacle()
{
  int line_value = lineFinder.readSensors();
  if (line_value == S1_IN_S2_IN) {
    return 1;
  } 
    return 0;
}

void stop_moving()
{
  motor_left.run(0);
  motor_right.run(0);
  delay(1000); 
}



int red()
{
  motor_left.run(MOTOR_SPEED);
  motor_right.run(MOTOR_SPEED);
  delay(560);  
}

int green() {
  motor_left.run(-MOTOR_SPEED);
  motor_right.run(-MOTOR_SPEED);
  delay(580);
}

int yellow() {
  red();
  stop_moving();
  red();
  stop_moving();  
}

int purple() {
  red();
  stop_moving();
  double frontDistance = 100;
  while ( frontDistance > 10.00 ) {
     frontDistance = ultra.distanceCm();
     Serial.print("Distance : ");
     Serial.print(frontDistance);
     Serial.println(" cm");
     moving_straight();
  }
  stop_moving();
  red();
  stop_moving();
}


int light_blue () {
  green();
  stop_moving();
  double frontDistance = 100;
  while ( frontDistance > 10.00 ) {
     frontDistance = ultra.distanceCm();
     Serial.print("Distance : ");
     Serial.print(frontDistance);
     Serial.println(" cm");
     moving_straight();
  }
  stop_moving();
  green();
  stop_moving();
} 

int black() 
{
  music();
}
  
void moving_straight()
{
  int s1, s2;
  s1 = ir_sensor.aRead1();
  s2 = ir_sensor.aRead2();
  Serial.print("S1: ");
  Serial.print(s1);
  Serial.print("\t");
  Serial.print("S2: ");
  Serial.println(s2);
  if (s1 > s2 ) {
    motor_left.run(-MOTOR_SPEED);
    motor_right.run(1.05 * MOTOR_SPEED);
  } else if ( s2 > s1 ) {
     motor_left.run(-1.05 * MOTOR_SPEED);
     motor_right.run(MOTOR_SPEED);
  } else {
     motor_left.run(-MOTOR_SPEED);
     motor_right.run(MOTOR_SPEED);
  }
}

int get_colour_code() 
{
  return 5;
}

void moveFront() {
  if ( obstacle() == 1 ) {
    stop_moving();
    if ( get_colour_code() == 0 ) {
    red();  
    } else if ( get_colour_code() == 1 ) {
      green();
      
    } else if ( get_colour_code() == 2 ) {
      yellow();
    } else if ( get_colour_code() == 3 ) {
      purple();
    } else if ( get_colour_code() == 4 ) {
      light_blue();
    } else {
      black();
    } 
  } else {
    moving_straight();
  }
}



    
// function to get the color codes(in integers) from the color challenge
// use only green LED
/* RED -> return 0
   GREEN -> return 1
   YELLOW -> return 2
   PURPLE -> return 3
   BLUE -> return 4 
   WHITE -> return 5
   BLACK -> return 6
   OTHERS -> return -1 */
 /*
int get_color_code() {
    int color = get_light_avg(NUM_OF_LIGHT_SAMPLES);

    // get color codes
    if (color > RED_LOWER && color < RED_UPPER) {
      // RED
      return 0;
    } else if(GREEN_LOWER && color < GREEN_UPPER) {
      // GREEN
      return 1;
    } else if(YELLOW_LOWER && color < YELLOW_UPPER) {
      // YELLOW
      return 2;
    } else if(PURPLE_LOWER && color < PURPLE_UPPER) {
      // PURPLE
      return 3;
    } else if(BLUE_LOWER && color < BLUE_UPPER) {
      // BLUE
      return 4;
    } else if(WHITE_LOWER && color < WHITE_UPPER) {
      // WHITE
      return 5;
    } else if (color < BLACK_UPPER) {
        // BLACK
        return 6;
    } else {
      // FAILED TO DETECT ANY OF THE ABOVE COLORS
      return -1
    }
}
*/


/*
// generated by mBlock5 for mBot
// codes make you happy

#include <MeMCore.h>
#include <Arduino.h>
#include <Wire.h>
#include <SoftwareSerial.h>

MeBuzzer buzzer;

void _delay(float seconds) {
  long endTime = millis() + seconds * 1000;
  while(millis() < endTime) _loop();
}

void setup() {

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 1.1 * 1000);

  buzzer.tone(1397, 1.3 * 1000);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1245, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1397, 0.25 * 1000);

  buzzer.tone(1397, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(932, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 1.25 * 1000);
  _delay(1);

  buzzer.tone(1047, 0.5 * 1000);

  buzzer.tone(1047, 0.5 * 1000);
  _delay(0.25);

  buzzer.tone(1568, 0.3 * 1000);

  buzzer.tone(1397, 1.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 1.1 * 1000);

  buzzer.tone(1175, 0.5 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 1.25 * 1000);
  _delay(1);

  buzzer.tone(1047, 0.5 * 1000);

  buzzer.tone(1047, 0.5 * 1000);
  _delay(0.5);

  buzzer.tone(1568, 0.5 * 1000);

  buzzer.tone(1760, 1.4 * 1000);
  _delay(0.25);

  buzzer.tone(1397, 0.5 * 1000);

  buzzer.tone(1568, 0.5 * 1000);
  _delay(1);

  buzzer.tone(1047, 1.25 * 1000);
  _delay(1);

  buzzer.tone(1047, 0.5 * 1000);

  buzzer.tone(1047, 0.5 * 1000);
  _delay(0.25);

  buzzer.tone(1568, 0.3 * 1000);

  buzzer.tone(1397, 1.25 * 1000);
  _delay(0.5);

  buzzer.tone(1245, 1.1 * 1000);

  buzzer.tone(1175, 0.5 * 1000);
  _delay(0.5);

  buzzer.tone(932, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(932, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(932, 0.25 * 1000);

  buzzer.tone(1047, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 0.25 * 1000);

  buzzer.tone(1175, 0.25 * 1000);
  _delay(0.5);

  buzzer.tone(1047, 2 * 1000);

}

void _loop() {
}

void loop() {
  _loop();
}
*/
